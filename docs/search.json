[
  {
    "objectID": "Homework3.html",
    "href": "Homework3.html",
    "title": "Entering the Tidyverse",
    "section": "",
    "text": "Installing and loading all needed libraries for this assignment\n#install.packages(\"tidyverse\")\n#install.packages(\"readxl\")\n#install.packages(\"DBI\")\n#install.packages(\"RSQLite\")\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(DBI)\nlibrary(RSQLite)\nlibrary(readxl)\nlibrary(dplyr)"
  },
  {
    "objectID": "Homework3.html#concepts",
    "href": "Homework3.html#concepts",
    "title": "Entering the Tidyverse",
    "section": "Concepts",
    "text": "Concepts\n\nIf your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\nThe path you would use is “../MyData.csv”\n\n\nWhat are the major benefits of using R projects?\n\n\nR Projects are helpful to simplify managing a working directory, and it makes using version control/sharing R projects easier as all the necessary files can be saved and transferred together with very few steps, so if everything is well defined using relative paths a program should run smoothly on any device that downloads that project.\n\n\nWhat is git and what is github?\n\n\nGit is a widely used open source version control software that simplifies the process of monitoring and documenting changes to files. Github is an online service that runs Git in a cloud setting that enables easier collaboration using Git over the internet.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nTibbles will automatically only print to fit the page as they assume a dataset is large, and subsetting a tibble will result in a new tibble, as opposed to how subsetting a data frame may create a vector.\n\n\nRewrite the following nested function call using baseR’s chaining operator:\n\n\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt; 1.55), Species)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n\n\nAnother way of achieving the same result as the function above is:\n\n\niris[(iris$Petal.Length &lt; 1.55),c(3,4,5)]\n\n   Petal.Length Petal.Width Species\n1           1.4         0.2  setosa\n2           1.4         0.2  setosa\n3           1.3         0.2  setosa\n4           1.5         0.2  setosa\n5           1.4         0.2  setosa\n7           1.4         0.3  setosa\n8           1.5         0.2  setosa\n9           1.4         0.2  setosa\n10          1.5         0.1  setosa\n11          1.5         0.2  setosa\n13          1.4         0.1  setosa\n14          1.1         0.1  setosa\n15          1.2         0.2  setosa\n16          1.5         0.4  setosa\n17          1.3         0.4  setosa\n18          1.4         0.3  setosa\n20          1.5         0.3  setosa\n22          1.5         0.4  setosa\n23          1.0         0.2  setosa\n28          1.5         0.2  setosa\n29          1.4         0.2  setosa\n32          1.5         0.4  setosa\n33          1.5         0.1  setosa\n34          1.4         0.2  setosa\n35          1.5         0.2  setosa\n36          1.2         0.2  setosa\n37          1.3         0.2  setosa\n38          1.4         0.1  setosa\n39          1.3         0.2  setosa\n40          1.5         0.2  setosa\n41          1.3         0.3  setosa\n42          1.3         0.3  setosa\n43          1.3         0.2  setosa\n46          1.4         0.3  setosa\n48          1.4         0.2  setosa\n49          1.5         0.2  setosa\n50          1.4         0.2  setosa\n\n\n\nWhat is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\n\n\nLong format data is data where each row corresponds to one observation and each column corresponds to one variable, versus wide data format is data where more than one observation may be present in a given row, generally because some sort of additional data is being encoded in the column labels. Generally, long format data is preferred as it is easier to manipulate."
  },
  {
    "objectID": "Homework3.html#reading-delimited-data",
    "href": "Homework3.html#reading-delimited-data",
    "title": "Entering the Tidyverse",
    "section": "Reading Delimited Data",
    "text": "Reading Delimited Data\n\nGlass Data\nFor the glass data set, first we read in our data, specifying that it is delimited by commas and adding column names via the read_delim() function.\n\nglass &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\",delim=\",\",col_names=c(\"Id\",\"RI\",\"Na\",\"Mg\",\"Al\",\"Si\",\"K\",\"Ca\",\"Ba\",\"Fe\",\"Type_of_glass\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n\nNext we mutate the type column to be corresponding text values, and we filter for iron &lt; 0.2 in glass used for tableware or headlamps.\n\nglass |&gt; \n  mutate(Type_of_glass = ifelse(Type_of_glass==1,\"building_windows_float_processed\",ifelse(Type_of_glass==2,\"building_windows_non_float_processed\",ifelse(Type_of_glass==3,\"vehicle_windows_float_processed\",ifelse(Type_of_glass==4,\"vehicle_windows_non_float_processed\",ifelse(Type_of_glass==5,\"containers\",ifelse(Type_of_glass==6,\"tableware\",ifelse(Type_of_glass==7,\"headlamps\",\"ERROR\")))))))) |&gt;\n  filter(Fe &lt; 0.2,Type_of_glass == c(\"tableware\",\"headlamps\"))\n\n# A tibble: 20 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0     0    tableware    \n 2   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0     0    tableware    \n 3   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0     0    tableware    \n 4   183  1.52  14.2  0     2.09  72.7  0    10.9   0     0    tableware    \n 5   185  1.51  17.4  0     0.34  75.4  0     6.65  0     0    tableware    \n 6   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19  0    headlamps    \n 7   188  1.52  13.4  3.34  1.23  72.4  0.6   8.83  0     0    headlamps    \n 8   190  1.52  15.8  1.83  1.31  70.4  0.31  8.61  1.68  0    headlamps    \n 9   192  1.52  14.8  0     2.38  73.3  0     8.76  0.64  0.09 headlamps    \n10   194  1.52  14.8  0     2     73.0  0     8.53  1.59  0.08 headlamps    \n11   196  1.52  14.1  0     2.68  73.4  0.08  9.07  0.61  0.05 headlamps    \n12   198  1.52  14.7  0     2.34  73.3  0     8.95  0.66  0    headlamps    \n13   200  1.52  15.0  0     2.51  73.0  0.05  8.83  0.53  0    headlamps    \n14   202  1.52  12.0  0     1.19  75.2  2.7   8.93  0     0    headlamps    \n15   204  1.52  14.8  0     1.99  73.1  0     8.28  1.71  0    headlamps    \n16   206  1.52  15.0  0     1.8   73.0  0     8.61  1.55  0    headlamps    \n17   208  1.52  14.4  0     1.82  72.9  1.41  6.47  2.88  0    headlamps    \n18   210  1.52  14.1  0     2.88  72.6  0.08  9.18  1.06  0    headlamps    \n19   212  1.52  14.4  0     2.02  73.4  0     8.44  1.64  0    headlamps    \n20   214  1.52  14.2  0     2.08  73.4  0     8.62  1.67  0    headlamps    \n\n\n\n\nYeast Data\nRead in the yeast data set and label columns.\n\nyeast &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",delim=\"  \",col_names=c(\"seq_name\",\"mcg\",\"gvh\",\"alm\",\"mit\",\"erl\",\"pox\",\"vac\",\"nuc\",\"class\"))\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"  \"\nchr (2): seq_name, class\ndbl (8): mcg, gvh, alm, mit, erl, pox, vac, nuc\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nyeast\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\nAdjust the data as needed.\n\nyeast |&gt; \n  select(mcg:vac,class) |&gt;\n  group_by(class) |&gt;\n  mutate(across(where(is.numeric),list(mean=mean,median=median),.names = \"{.col}.{.fn}\"))\n\n# A tibble: 1,484 × 22\n# Groups:   class [44]\n     mcg   gvh   alm   mit   erl   pox   vac class mcg.mean mcg.median gvh.mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521       0.51    0.531\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521       0.51    0.531\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521       0.51    0.531\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.453       0.45    0.458\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521       0.51    0.531\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.480       0.48    0.469\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521       0.51    0.531\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.453       0.45    0.458\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521       0.51    0.531\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.480       0.48    0.469\n# ℹ 1,474 more rows\n# ℹ 11 more variables: gvh.median &lt;dbl&gt;, alm.mean &lt;dbl&gt;, alm.median &lt;dbl&gt;,\n#   mit.mean &lt;dbl&gt;, mit.median &lt;dbl&gt;, erl.mean &lt;dbl&gt;, erl.median &lt;dbl&gt;,\n#   pox.mean &lt;dbl&gt;, pox.median &lt;dbl&gt;, vac.mean &lt;dbl&gt;, vac.median &lt;dbl&gt;"
  },
  {
    "objectID": "Homework3.html#combining-excel-and-delimited-data",
    "href": "Homework3.html#combining-excel-and-delimited-data",
    "title": "Entering the Tidyverse",
    "section": "Combining Excel and Delimited Data",
    "text": "Combining Excel and Delimited Data\nRead in our white wine data, rename the variables, and add a column indicating wine type.\n\nwhite_wine &lt;- read_excel(\"white-wine.xlsx\",sheet = excel_sheets(\"white-wine.xlsx\")[1])\nwhite_wine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\nwhite_wine_vars &lt;- read_excel(\"white-wine.xlsx\",sheet = excel_sheets(\"white-wine.xlsx\")[2])\ncolnames(white_wine) &lt;- white_wine_vars$Variables\nwhite_wine2 &lt;- white_wine |&gt; \n  mutate(type = \"White\")\n\nRead in our red wine data, rename the variables, and add a column indicating wine type.\n\nred_wine &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\", delim = \";\")\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncolnames(red_wine) &lt;- white_wine_vars$Variables\nred_wine2 &lt;- red_wine |&gt; \n  mutate(type = \"Red\")\n\nCombine the wine data sets together as perform our needed data transformations.\n\nwine &lt;- bind_rows(white_wine2, red_wine2)\nwine |&gt;\n  filter(quality&gt;6.5,alcohol&lt;132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"),alcohol,type,quality) |&gt;\n  group_by(quality) |&gt;\n  mutate(across(alcohol,list(mean=mean,sd=sd),.names = \"{.col}.{.fn}\"))\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol type  quality alcohol.mean\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n 1            91             0.27        0.45     104 White       9        122. \n 2            66             0.36        0.29     124 White       9        122. \n 3            74             0.24        0.36     125 White       9        122. \n 4            69             0.36        0.34     127 White       9        122. \n 5            71             0.26        0.49     129 White       9        122. \n 6            62             0.66        0.48     128 White       8         94.1\n 7            62             0.66        0.48     128 White       8         94.1\n 8            68             0.26        0.42     105 White       8         94.1\n 9            67             0.23        0.31     107 White       8         94.1\n10            67             0.23        0.31     107 White       8         94.1\n# ℹ 1,196 more rows\n# ℹ 1 more variable: alcohol.sd &lt;dbl&gt;"
  },
  {
    "objectID": "Homework3.html#database-practice",
    "href": "Homework3.html#database-practice",
    "title": "Entering the Tidyverse",
    "section": "Database Practice",
    "text": "Database Practice\nConnect to the database.\n\ncon &lt;- dbConnect(RSQLite::SQLite(), \"lahman.db\")\n\nShow list of tables and the Teams data from 2015.\n\ndbListTables(con)\n\n [1] \"AllstarFull\"         \"Appearances\"         \"AwardsManagers\"     \n [4] \"AwardsPlayers\"       \"AwardsShareManagers\" \"AwardsSharePlayers\" \n [7] \"Batting\"             \"BattingPost\"         \"CollegePlaying\"     \n[10] \"Fielding\"            \"FieldingOF\"          \"FieldingOFsplit\"    \n[13] \"FieldingPost\"        \"HallOfFame\"          \"HomeGames\"          \n[16] \"LahmanData\"          \"Managers\"            \"ManagersHalf\"       \n[19] \"Parks\"               \"People\"              \"Pitching\"           \n[22] \"PitchingPost\"        \"Salaries\"            \"Schools\"            \n[25] \"SeriesPost\"          \"Teams\"               \"TeamsFranchises\"    \n[28] \"TeamsHalf\"           \"battingLabels\"       \"fieldingLabels\"     \n[31] \"pitchingLabels\"     \n\ntbl(con,\"Teams\") |&gt;\n  filter(yearID == 2015)\n\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.45.2 [/Users/thomas/Repos/Homework3/lahman.db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\nShow the Teams data using SQL.\n\ntbl(con,sql(\n  \"SELECT * \n  FROM `Teams`\n  WHERE (`yearID` = 2015)\")\n)\n\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.45.2 [/Users/thomas/Repos/Homework3/lahman.db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\nFind the list of players who were inducted into the Hall of Fame.\n\ntbl(con,sql(\n  \"SELECT `playerID`,`yearID`,`category`,`Inducted`\n  FROM HallOfFame\")) |&gt;\n  filter(Inducted == \"Y\") |&gt;\n  select(playerID,yearID,category)\n\n# Source:   SQL [?? x 3]\n# Database: sqlite 3.45.2 [/Users/thomas/Repos/Homework3/lahman.db]\n   playerID  yearID category         \n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;            \n 1 cobbty01    1936 Player           \n 2 ruthba01    1936 Player           \n 3 wagneho01   1936 Player           \n 4 mathech01   1936 Player           \n 5 johnswa01   1936 Player           \n 6 lajoina01   1937 Player           \n 7 speaktr01   1937 Player           \n 8 youngcy01   1937 Player           \n 9 bulkemo99   1937 Pioneer/Executive\n10 johnsba99   1937 Pioneer/Executive\n# ℹ more rows\n\n\nCombine with the list of first and last names.\n\ntbl(con,sql(\n  \"SELECT HallOfFame.playerID,HallOfFame.yearID,HallOfFame.category,HallOfFame.Inducted,People.nameFirst,People.nameLast\n  FROM HallOfFame\n  INNER JOIN People on HallOfFame.playerID = People.playerID\")) |&gt;\n  filter(Inducted == \"Y\") |&gt;\n  select(playerID,yearID,category,nameFirst,nameLast)\n\n# Source:   SQL [?? x 5]\n# Database: sqlite 3.45.2 [/Users/thomas/Repos/Homework3/lahman.db]\n   playerID  yearID category          nameFirst nameLast \n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;             &lt;chr&gt;     &lt;chr&gt;    \n 1 cobbty01    1936 Player            Ty        Cobb     \n 2 ruthba01    1936 Player            Babe      Ruth     \n 3 wagneho01   1936 Player            Honus     Wagner   \n 4 mathech01   1936 Player            Christy   Mathewson\n 5 johnswa01   1936 Player            Walter    Johnson  \n 6 lajoina01   1937 Player            Nap       Lajoie   \n 7 speaktr01   1937 Player            Tris      Speaker  \n 8 youngcy01   1937 Player            Cy        Young    \n 9 bulkemo99   1937 Pioneer/Executive Morgan    Bulkeley \n10 johnsba99   1937 Pioneer/Executive Ban       Johnson  \n# ℹ more rows\n\n\nCollect the list of managers and calculate W/L records.\n\ntbl(con, sql(\n  \"SELECT `playerID`, `G`, `W`, `L`\n  FROM Managers\")) |&gt;\n  group_by(playerID) |&gt;\n  summarize(G_managed = sum(G, na.rm = TRUE),\n  Total_W = sum(W, na.rm = TRUE),\n  Total_L = sum(L, na.rm = TRUE)) |&gt;\n  collect() |&gt;\n  mutate(Total_W_G_managed = Total_W/(Total_W+Total_L)) |&gt;\n  arrange(desc(Total_W_G_managed))\n\n# A tibble: 749 × 5\n   playerID  G_managed Total_W Total_L Total_W_G_managed\n   &lt;chr&gt;         &lt;int&gt;   &lt;int&gt;   &lt;int&gt;             &lt;dbl&gt;\n 1 bensove01         1       1       0                 1\n 2 burwebi01         1       1       0                 1\n 3 cohenan01         1       1       0                 1\n 4 ebeldi99          3       3       0                 1\n 5 falkbi01          1       1       0                 1\n 6 hardeme01         3       3       0                 1\n 7 simmote01         1       1       0                 1\n 8 steinte01         2       2       0                 1\n 9 sukefcl01         2       2       0                 1\n10 tamarjo01         1       1       0                 1\n# ℹ 739 more rows\n\n\nCombine Hall of Fame-rs and Managers to determine which successful players were also successful managers.\n\na &lt;- as_tibble(tbl(con,sql(\n  \"SELECT HallOfFame.playerID,HallOfFame.yearID,HallOfFame.category,HallOfFame.Inducted,People.nameFirst,People.nameLast\n  FROM HallOfFame\n  INNER JOIN People on HallOfFame.playerID = People.playerID\"))) |&gt;\n  filter(inducted == \"Y\") |&gt;\n  select(playerID,yearID,category,nameFirst,nameLast)\n\nb &lt;- as_tibble(tbl(con, sql(\n  \"SELECT `playerID`, `G`, `W`, `L`\n  FROM Managers\"))) |&gt;\n  group_by(playerID) |&gt;\n  summarize(G_managed = sum(G, na.rm = TRUE),\n  Total_W = sum(W, na.rm = TRUE),\n  Total_L = sum(L, na.rm = TRUE)) |&gt;\n  collect() |&gt;\n  mutate(Total_W_G_managed = Total_W/(Total_W+Total_L))\n\nBestPlayerManagers &lt;- a |&gt;\n  inner_join(b, by=join_by(playerID)) |&gt;\n  arrange(desc(Total_W_G_managed))\n\nBestPlayerManagers\n\n# A tibble: 97 × 9\n   playerID  yearID category        nameFirst nameLast G_managed Total_W Total_L\n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;           &lt;chr&gt;     &lt;chr&gt;        &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n 1 simmote01   2020 Player          Ted       Simmons          1       1       0\n 2 wrighge01   1937 Pioneer/Execut… George    Wright          85      59      25\n 3 spaldal01   1939 Pioneer/Execut… Al        Spalding       126      78      47\n 4 mccarjo99   1957 Manager         Joe       McCarthy      3487    2125    1333\n 5 comisch01   1939 Pioneer/Execut… Charlie   Comiskey      1410     840     541\n 6 seleefr99   1999 Manager         Frank     Selee         2180    1284     862\n 7 southbi01   2008 Manager         Billy     Southwo…      1770    1044     704\n 8 chancfr01   1946 Player          Frank     Chance        1622     946     648\n 9 mcgrajo01   1937 Manager         John      McGraw        4769    2763    1948\n10 lopezal01   1977 Manager         Al        Lopez         2425    1410    1004\n# ℹ 87 more rows\n# ℹ 1 more variable: Total_W_G_managed &lt;dbl&gt;\n\n\nDisconnect from the Database\n\ndbDisconnect(con)"
  }
]